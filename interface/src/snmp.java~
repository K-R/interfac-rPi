
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.*;
import java.lang.Integer;
import snmp.*; //snmp.jar file

public class snmp {

    public String READ_COMMUNITY;
    public String WRITE_COMMUNITY;
    public int iSNMPVersion;
    public String OID_Table;
    public String strOID_Mac;
    public String strIPAddress;

    public snmp(String AddIp) {
        READ_COMMUNITY = "public";
        WRITE_COMMUNITY = "private";
        iSNMPVersion = 1; // 1 represents SNMP version=2
        OID_Table = "1.3.6.1.4.1.4526.11.16.1.1.1.3.1.";
	strOID_Mac = "1.3.6.1.2.1.17.7.1.2.2.1.2.1";
        strIPAddress = AddIp;

    }

    public void snmpSet(String community, int port, int Value) {
        try {
            if (port == 0) {

                InetAddress hostAddress = InetAddress.getByName(strIPAddress);
                SNMPv1CommunicationInterface comInterface = new SNMPv1CommunicationInterface(iSNMPVersion, hostAddress, community);
                SNMPVarBindList newVars = new SNMPVarBindList();

                for (int i = 1; i < 9; i++) {
                    //System.out.println("Port : "+ i);
                    //System.out.println("Setting value : " + String.valueOf(Value));
                    //System.out.println("to OID " + strOID + String.valueOf(i) +"\n");
                    newVars = comInterface.setMIBEntry(strOID + String.valueOf(i), new SNMPInteger(Value));
                }
            }

            if (port < 9 && port > 0) {
                InetAddress hostAddress = InetAddress.getByName(strIPAddress);
                SNMPv1CommunicationInterface comInterface = new SNMPv1CommunicationInterface(iSNMPVersion, hostAddress, WRITE_COMMUNITY);
                SNMPVarBindList newVars = new SNMPVarBindList();
                //System.out.println("Port : "+ port);
                //System.out.println("to OID " + strOID + String.valueOf(port));
                //System.out.println("Setting value : " + String.valueOf(Value) + "\n"); 
                newVars = comInterface.setMIBEntry(OID_Table + String.valueOf(port), new SNMPInteger(Value));
                String valueString = new String();
            }



        } catch (Exception e) {
            System.out.println("Exception during SNMP Set operation: " + e + "\n");
        }
    }
    /*
     * This method process the request and Get the Value on the device
     * @returns value of the state of the port
     */

    public String snmpGetPort(String strIPAddress, String community, int iSNMPVersion, String strOID_Table, int port) {
        String str = "";
        try {
            InetAddress hostAddress = InetAddress.getByName(strIPAddress);
            //System.out.println("hostAddress = " + hostAddress);
            //System.out.println("community = " + community);
            SNMPv1CommunicationInterface comInterface = new SNMPv1CommunicationInterface(iSNMPVersion, hostAddress, community);
            //System.out.println("strOID = " + strOID_Table + String.valueOf(port));
            // returned Vector has just one pair inside it.

            SNMPVarBindList newVars = comInterface.getMIBEntry(strOID_Table + String.valueOf(port));
            // extract the (OID,value) pair from the SNMPVarBindList;
            //the pair is just a two-element
            // SNMPSequence

            SNMPSequence pair = (SNMPSequence) (newVars.getSNMPObjectAt(0));
            // extract OID from the pair; it's the first element in the sequence

            SNMPObjectIdentifier snmpOID = (SNMPObjectIdentifier) pair.getSNMPObjectAt(0);
            //extract the value from the pair;
            // it's the second element in the sequence

            SNMPObject snmpValue = pair.getSNMPObjectAt(1);
            str = snmpValue.toString();
        } catch (Exception e) {
            System.out.println("Exception during SNMP operation: " + e + "\n");
        }
        //System.out.println("Retrieved value: " + str);
        return str;
    }

	public String[][] snmpGetMacAddress(String strIPAddress, String community, int iSNMPVersion, String strOID_Mac){

		String str="";
		int taille=0;
		String macTabEntier[][]=null;
		String macTab[]=null;
		 try {
		    InetAddress hostAddress = InetAddress.getByName(strIPAddress);
		    //System.out.println("hostAddress = " + hostAddress);
		    //System.out.println("community = " + community);
		    SNMPv1CommunicationInterface comInterface = new SNMPv1CommunicationInterface(iSNMPVersion, hostAddress, community);
		    //System.out.println("strOID = " + strOID_Table + String.valueOf(port));
		    // returned Vector has just one pair inside it.

		    SNMPVarBindList newVars = comInterface.retrieveMIBTable(strOID_Mac);
		    // extract the (OID,value) pair from the SNMPVarBindList;
		    //the pair is just a two-element
		    // SNMPSequence

		    taille=newVars.size();
		    //System.out.println("taille : " + taille);
		    
		    SNMPSequence pair[]=new SNMPSequence[taille];
		    macTabEntier = new String[taille][2];
		    macTab = new String[taille];
		    
		    for (int i=0;i<taille;i++){
		        pair[i] = (SNMPSequence) (newVars.getSNMPObjectAt(i));
		        macTabEntier[i][0]=pair[i].getSNMPObjectAt(1).toString();
		        macTabEntier[i][1]=pair[i].getSNMPObjectAt(0).toString().replace(strOID_Mac + ".","").replace(".",":");
		        //System.out.println(macTabEntier[i][0]+ " : " + macTabEntier[i][1]);

		        macTab = macTabEntier[i][1].split(":");
		        
		        macTabEntier[i][1]="";
		        
		        for (int j=0;j<macTab.length;j++){
		            
		            StringBuilder sb = new StringBuilder();
		            sb.append(Integer.toHexString(Integer.valueOf(macTab[j])));
		            if (sb.length() < 2) {
		                sb.insert(0, '0'); // pad with leading zero if needed
		            }
		            String hex = sb.toString();
		            
		            
		            if(j!=macTab.length-1){
		                macTabEntier[i][1] = macTabEntier[i][1] + hex+":";
		            }
		            else{
		                macTabEntier[i][1] = macTabEntier[i][1] + hex;
		            }
		               
		       
		        }
		        //System.out.println(macTabEntier[i][0] +" : " + macTabEntier[i][1]);   
		    }


          
        
        } catch (Exception e) {
            System.out.println("Exception during SNMP operation: " + e + "\n");
        }

         return macTabEntier;
        
    }
    
    public String[][] snmpGetAllAddress(String strIPAddress, String community, int iSNMPVersion, String strOID_Mac, Boolean onserver){
        String ipTab[][];
        String macTab[][]=snmpGetMacAddress(strIPAddress,community,iSNMPVersion,strOID_Mac);
        Boolean ping=false;
        InetAddress inet=null;
        int taille = macTab.length;
        
        ipTab=new String[taille][3];
        int compteur=0;
        int i=0;
        BufferedReader in ;
        
        if (onserver==false){
            try{
                while(compteur!=taille && i<255) {
                        
                            inet = InetAddress.getByName("192.168.0."+i);
                            //System.out.println("Sending Ping Request to " + "192.168.0."+i);
                            if (inet.isReachable(100)==true){
                                //System.out.println("Host is reachable");
                                compteur++;
                            }
                            else{
                                //System.out.println("Host is NOT reachable");
                            }
                        //System.out.println(compteur);
                        i++;
                    
                }
            }
            catch(Exception e){
            System.out.println("internal error");
            System.exit(0);
            }
        }
            // arp -n | grep adrMac | awk '{print $1}' 
            for (int j=0;j<macTab.length;j++){
                    ipTab[j][0]=macTab[j][0];
                    ipTab[j][2]=macTab[j][1];
                try{
                    ProcessBuilder pb = new ProcessBuilder("./getip.sh",macTab[j][1]);
                    pb.redirectErrorStream(true);
                    Process process = pb.start();
                    InputStream processOutput = process.getInputStream();
                    try {
                        process.getOutputStream().close(); // fermeture du flux stdin inutilisÃ©
                        in = new BufferedReader( new InputStreamReader(process.getInputStream()));
                        ipTab[j][1]=in.readLine();

                    } finally { processOutput.close(); }
                } catch (IOException e) {
                    e.printStackTrace();
                }
               //System.out.println (ipTab[j][0] + " : " + ipTab[j][1] + " : " + ipTab[j][2]+ "\n");          
            }
        
        java.util.Arrays.sort(ipTab, new AlphaComparator());
        for (int j=0;j<ipTab.length;j++){
            System.out.println (ipTab[j][0] + " : " + ipTab[j][1] + " : " + ipTab[j][2]);  
        }
       
        return ipTab;
    }

    public void snmpGetTable(String strIPAddress, String community, int iSNMPVersion, String strOID_Table) {

        for (int i = 1; i < 9; i++) {
            //System.out.println("Port : " + i);
            snmpGetPort(strIPAddress, community, iSNMPVersion, strOID_Table, i);
            //System.out.println();
        }
    }

    public boolean getEtat(int NumPort) {
        String ret;

        ret = snmpGetPort(strIPAddress, WRITE_COMMUNITY, mSNMPVersion, OID_Table, NumPort);

        if (Integer.valueOf(ret) == 1) {
            return true;
        } else {
            return false;
        }
    }

     class AlphaComparator implements java.util.Comparator {
        public int compare( Object o1, Object o2){
            return Integer.valueOf((String) ((Object[]) o1)[0]) -  Integer.valueOf((String) ((Object[]) o2)[0]);
        }
    }
}
